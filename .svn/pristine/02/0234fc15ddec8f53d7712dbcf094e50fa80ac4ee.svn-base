using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;


namespace Numerical_calculator
{
    public partial class Test : Form
    {
        public int rad_zobrazenia = 2;
        public List<Item_box> ListOfItemBoxes;
        public Graphics g_stare;
        public List<Items> ItemColection = new List<Items>();
        public List<Reactions> RactionColection = new List<Reactions>();
        public List<Items_used> ItemColection_used = new List<Items_used>();
        public List<Reactions_used> ReactionColection_used = new List<Reactions_used>();
        public int parameter_x = 0;
        public int parameter_y = 0;
        public int Actual_Center_x;
        public int Actual_Center_y;
        public int[,] Item_array;
        public int [] Name_array;
        public int curent_name = -1;
        public int sirka_bunky = 0;
        public bool mouse = false;
        public Bitmap buffer, backround, pure_backround;
        public System.Windows.Forms.Label new_label;
        public bool selected = false;
        public int selected_nmb = 0;
        public int selected_nmb_old = 0;
        public Point selected_coor;
        public Point selected_coor_new;
        public Point selected_coor_old;
        public bool draw_conection = false;
        public bool conection_posibility = false;
        public bool create_reaction = false;
        public int create_reaction_initial;
        public bool tahanie = false;
        public bool chyba_kliku = true;
        public bool constanta_live = false;
        public string s;

        public Test()
        {
            InitializeComponent();
            //
            // Load Items from external file
            //
            Load_items();
        }

        public void panel1_refresh(object sender, PaintEventArgs e)
        {
            foreach (Label lab in panel1.Controls.OfType<Label>())
            {   
                ///
                /// just to be sure !
                /// 
                lab.Enabled = false;
                lab.Visible = false;
                Point p = new Point(-1000, -1000);
                lab.Location = p;
            }
            foreach (Label lab in panel1.Controls.OfType<Label>())
            {
                lab.Dispose();
            }
            buffer = new Bitmap(panel1.Width, panel1.Height);
            System.Drawing.Graphics graphics = Graphics.FromImage(buffer);
            graphics.Clear(Color.WhiteSmoke);

            Pen pen_dot = new Pen(Color.Blue, 2);
            int pocet_prvkov = 6 * rad_zobrazenia * rad_zobrazenia;
            int pocet_prvkov_x = 3 * rad_zobrazenia;
            int pocet_prvkov_y = 2 * rad_zobrazenia;
            int x_diff = panel1.Width / pocet_prvkov_x;
            sirka_bunky = x_diff;
            int y_diff = panel1.Height / pocet_prvkov_y;
            int cnt = 0, rel_x = 0, rel_y = 0, pos_x = 0, pos_y = 0, cent_x, cent_y;
            ListOfItemBoxes = new List<Item_box>();
            for (int i = 0; i < pocet_prvkov_x; i++)
            {
                rel_y = 0;
                pos_y = 0;
                for (int j = 0; j < pocet_prvkov_y; j++)
                {
                    cent_x = pos_x + (x_diff / 2);
                    cent_y = pos_y + (y_diff / 2);
                    ListOfItemBoxes.Add(new Item_box { Number = cnt, Relaive_x = rel_x, Relaive_y = rel_y, 
                                                       Center_x = cent_x, Center_y = cent_y,
                                                       Dim_y = y_diff,
                                                       Dim_x = x_diff, 
                                                       Position_x = pos_x, Position_y = pos_y });
                    cnt++;
                    rel_y++;
                    pos_y += y_diff;
                }
                rel_x++;
                pos_x += x_diff;
            }
            graphics.Dispose();
            System.Drawing.Graphics graphicsObj = e.Graphics;
            graphicsObj.Clear(Color.WhiteSmoke);
            graphicsObj.DrawImage(buffer, 0, 0, buffer.Width, buffer.Height);
            Create_array();
            this.panel1.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);
            this.panel1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);
            this.panel1.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);
            this.panel1.MouseClick += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseClick);
            panel1.Paint -= new System.Windows.Forms.PaintEventHandler(panel1_refresh);
            backround = (Bitmap)buffer.Clone();
            pure_backround = (Bitmap)buffer.Clone();
            foreach(Items_used Item in ItemColection_used)
            {
                foreach (Item_box IB in ListOfItemBoxes)
                {
                    if ((Item.relative_x == IB.Relaive_x) && (Item.relative_y == IB.Relaive_y))
                    {
                        Item.box_number = IB.Number;
                        int limit = sirka_bunky - sirka_bunky / 4;
                        new_label = new System.Windows.Forms.Label();
                        new_label.AutoSize = true;
                        new_label.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
                        new_label.Location = new System.Drawing.Point(IB.Center_x, IB.Center_y);
                        new_label.Name = "Name" + Item.box_number.ToString();
                        new_label.Size = new System.Drawing.Size(20, 30);
                        new_label.TabIndex = 7;
                        new_label.Text = "";
                        this.new_label.MouseClick += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseClick);
                        this.new_label.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);
                        this.new_label.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);
                        this.new_label.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);

                        Point point = new Point();
                        panel1.Controls.Add(new_label);
                        new_label.Text = "[" + Item.s_name + "]";
                        point.X = IB.Center_x - (new_label.Size.Width / 2);
                        point.Y = IB.Center_y - (new_label.Size.Height / 2);
                        new_label.Location = point;
                        if (new_label.Size.Width > limit)
                        {
                            float old = new_label.Font.Size;
                            while (new_label.Size.Width > limit)
                            {
                                new_label.Font = new System.Drawing.Font("Microsoft Sans Serif", old, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
                                old--;
                            }
                            point = new Point();
                            panel1.Controls.Add(new_label);
                            new_label.Text = "[" + Item.s_name + "]";
                            point.X = IB.Center_x - (new_label.Size.Width / 2);
                            point.Y = IB.Center_y - (new_label.Size.Height / 2);
                            new_label.Location = point;
                        }
                    }
                }
            }
            draw_reactions();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.panel1.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);
            rad_zobrazenia++;
            if (rad_zobrazenia > 10)
            {
                rad_zobrazenia = 10;
            }
            start_refresh_panel1();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            this.panel1.MouseMove -= new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);
            rad_zobrazenia--;
            if (rad_zobrazenia < 1)
            {
                rad_zobrazenia = 1;
            }
            start_refresh_panel1();
        }

        void start_refresh_panel1()
        {
            panel1.Refresh();
            panel1.Paint += new System.Windows.Forms.PaintEventHandler(panel1_refresh);
        }

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            Point cur_pos = panel1.PointToClient(Cursor.Position);
            mouse = true;
            for (int i = 0; i < Item_array.GetLength(1); i++)
            {
                if (cur_pos.X > Item_array[0, i] &&
                    cur_pos.X < Item_array[0, i] + Item_array[2, i] &&
                    cur_pos.Y > Item_array[1, i] &&
                    cur_pos.Y < Item_array[1, i] + Item_array[3, i])
                {
                    if (curent_name != i)
                    {
                        System.Drawing.Graphics graphics = this.panel1.CreateGraphics();
                        graphics.DrawImage(buffer, 0, 0, buffer.Width, buffer.Height);
                        int point_x = Item_array[0, i] + Item_array[2, i] / 10;
                        int point_y = Item_array[1, i] + Item_array[3, i] / 10;
                        int delta_x = Item_array[2, i] - Item_array[2, i] / 5;
                        int delta_y = Item_array[3, i] - Item_array[3, i] / 5;
                        Pen pen = new Pen(Color.Blue, 1);
                        graphics.DrawRectangle(pen, point_x, point_y, delta_x, delta_y);
                        Pen pen2 = new Pen(Color.WhiteSmoke, 1);
                        graphics.DrawLine(pen2, point_x + delta_x / 3, point_y, point_x + delta_x - delta_x / 3, point_y);
                        graphics.DrawLine(pen2, point_x + delta_x / 3, point_y + delta_y, point_x + delta_x - delta_x / 3, point_y + delta_y);
                        graphics.DrawLine(pen2, point_x, point_y + delta_y / 3, point_x, point_y + delta_y - delta_y / 3);
                        graphics.DrawLine(pen2, point_x + delta_x, point_y + delta_y / 3, point_x + delta_x, point_y + delta_y - delta_y / 3);
                        curent_name = i;
                        if (draw_conection && conection_posibility)
                        {
                            // mis je dole, kresli spojnicu 
                            Pen pen3 = new Pen(Color.SkyBlue);
                            selected_coor_new = new Point(Item_array[4, i], Item_array[5, i]);
                            graphics.DrawLine(pen3, selected_coor, selected_coor_new);
                            create_reaction = true;
                            tahanie = true;
                        }
                        graphics.Dispose();
                    }

                }
            }
        }

        private void Create_array()
        {
            Item_array = new int[8,ListOfItemBoxes.Count];
            Name_array = new int[ListOfItemBoxes.Count];
            int i = 0;
            foreach(Item_box IB in ListOfItemBoxes)
            {
                Name_array[i] = IB.Number;
                Item_array[0,i] = IB.Position_x;
                Item_array[1,i] = IB.Position_y;
                Item_array[2,i] = IB.Dim_x;            
                Item_array[3,i] = IB.Dim_y;
                Item_array[4,i] = IB.Center_x;
                Item_array[5,i] = IB.Center_y;
                i++;
            }
        }

        private void Test_Load(object sender, EventArgs e)
        {
            start_refresh_panel1();
        }

        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            draw_conection = true;
            selected_nmb_old = selected_nmb;
        }

        private void panel1_MouseUp(object sender, MouseEventArgs e)
        {
            if (chyba_kliku)
            {
                selected_nmb = curent_name;
                create_reaction_initial = curent_name;
                if (!tahanie)
                {
                    foreach (Item_box IB in ListOfItemBoxes)
                    {
                        if (curent_name == IB.Number)
                        {
                            selected_coor_old = new Point(IB.Center_x, IB.Center_y);
                        }
                    }
                }
                buffer = (Bitmap)backround.Clone();
               // draw_reactions();
                comboBox_reaction.Text = "";
                textBox1.Text = "";
                textBox_Product.Text = "";
                comboBox_Reactant.Text = "";
                comboBox_Product.Text = "";
                listBox_Direction.Text = "";
                textBox_rate.Text = "";
                textBox_rate_.Text = "";
                constanta_live = false;
                konstanta_enable(false);
                if (ItemColection.Count == 0)
                {
                    new_item(selected_nmb);
                }
                else
                {
                    bool is_new_item = true;
                    foreach (Items_used I in ItemColection_used)
                    {
                        if (I.box_number == selected_nmb)
                        {
                            is_new_item = false;
                        }
                    }
                    if (is_new_item == true)
                    {
                        new_item(selected_nmb);
                    }
                    else
                    {
                        existing_item(selected_nmb);

                    }
                }
            }
            draw_conection = false;
            tahanie = false;
            if (create_reaction)
            {
                // allow reaction 
                constanta_live = true;
                konstanta_enable(true);
                try_enable_konstanta_add();
                foreach (Items_used Item in ItemColection_used)
                {
                    if (selected_nmb_old == Item.box_number)
                    {
                        textBox1.Text = Item.s_name;
                    }
                    if (selected_nmb == Item.box_number)
                    {
                        textBox_Product.Text = Item.s_name;
                    }
                }
                foreach (Items Item in ItemColection)
                {
                    if (Item.cation == false)
                    {
                        comboBox_Reactant.Items.Add(Item.s_name);
                        comboBox_Product.Items.Add(Item.s_name);
                    }
                }
            }     
            create_reaction = false;
            chyba_kliku = true;
        }

        private void panel1_MouseClick(object sender, MouseEventArgs e)
        {
             // ak nie je  nic, vytvor Item
            chyba_kliku = false;
            selected_nmb = curent_name;
            create_reaction_initial = curent_name;
            if (!tahanie)
            {
                foreach (Item_box IB in ListOfItemBoxes)
                {
                    if (curent_name == IB.Number)
                    {
                        selected_coor_old = new Point(IB.Center_x, IB.Center_y);
                    }
                }
            }
            buffer = (Bitmap)backround.Clone();
            //draw_reactions();
            comboBox_reaction.Text = "";
            textBox1.Text = "";
            textBox_Product.Text = "";
            comboBox_Reactant.Text = "";
            comboBox_Product.Text = "";
            listBox_Direction.Text = "";
            textBox_rate.Text = "";
            textBox_rate_.Text = "";
            constanta_live = false;
            konstanta_enable(false);
             if (ItemColection.Count == 0)
             {
                 new_item(selected_nmb);
             }
             else
             {
                bool is_new_item = true;
                foreach (Items_used I in ItemColection_used)
                {
                    if (I.box_number == selected_nmb)
                    {
                        is_new_item = false;
                    }
                }
                if (is_new_item == true)
                {
                    new_item(selected_nmb);
                }
                else
                {
                    existing_item(selected_nmb);

                }
             }
        }

        private void button_ApplyElement_Click(object sender, EventArgs e)
        {
            bool dont_show_neutral = false;
            bool pokracuj = true;
            bool zmaz_povodne = false;
            Items_used to_remove = new Items_used();
            if (constanta_live)
            {
                textBox_Product.Text = textBox_shortname.Text;
            }
            foreach (Items_used I in ItemColection_used)
            {
                if (comboBox_name.Text == I.name) // ak je uz pouzity, ci to myslim vazne
                {
                    if (MessageBox.Show("Do you want to continue?", "Name already exist.",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                        == DialogResult.No)
                    {
                        pokracuj = false;
                    }
                }
                if (selected_nmb == I.box_number)
                {
                    zmaz_povodne = true;
                    to_remove = I;                   
                }
            }
            ItemColection_used.Remove(to_remove);
            if (!radioButton_cation.Checked)
            {

                if (MessageBox.Show("Do you want to add that neutral into a scheme?", "Neutral molecule detected",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                    == DialogResult.No)
                {
                    dont_show_neutral = true;
                }
            }
            if (dont_show_neutral)
            {
                bool jetu = false;
                foreach (Items Item in ItemColection)
                {
                    if (Item.name == comboBox_name.Text)
                    {
                        jetu = true;
                    }
                }
                if (!jetu)
                {
                    Items Item = new Items();
                    Item.name = comboBox_name.Text;
                    Item.formula = textBox_formula.Text;
                    Item.s_name = textBox_shortname.Text;
                    Item.concentration = Convertor(textBox_concentration.Text);

                    Item.mobility = Convertor(textBox_mobility.Text);
                    Item.mass = Convertor(textBox_mass.Text);
                    Item.diffusion = Convertor(textBox_difusion.Text);
                    if (radioButton_cation.Checked == true)
                    { Item.cation = true; }
                    else { Item.cation = false; }
                    ItemColection.Add(Item);
                    comboBox_name.Items.Add(Item.name);
                }
            }
            if (pokracuj == true && dont_show_neutral == false)
            {
                if (zmaz_povodne)
                {
                    foreach (Label lab in panel1.Controls.OfType<Label>())
                      {
                          if (lab.Name == "Name" + selected_nmb.ToString())
                          {
                              lab.Dispose();
                          }
                      }
                }
                Items_used new_Item = new Items_used();
                new_Item.name = comboBox_name.Text;
                new_Item.formula = textBox_formula.Text;
                new_Item.s_name = textBox_shortname.Text;
                new_Item.concentration = Convertor(textBox_concentration.Text);
                new_Item.mobility = Convertor(textBox_mobility.Text);
                new_Item.mass = Convertor(textBox_mass.Text);
                new_Item.diffusion = Convertor(textBox_difusion.Text);
                if (radioButton_cation.Checked == true)
                { new_Item.cation = true; } else { new_Item.cation = false; }
                new_Item.box_number = selected_nmb;
                foreach(Item_box IB in ListOfItemBoxes)
                {
                    if(IB.Number == selected_nmb)
                    {
                        new_Item.relative_x = IB.Relaive_x;
                        new_Item.relative_y = IB.Relaive_y;
                    }
                }
                ItemColection_used.Add(new_Item);
                bool jetu = false;
                foreach (Items Item in ItemColection)
                {
                    if (Item.name == new_Item.name)
                    {
                        jetu = true;
                    }
                }
                if (!jetu)
                {
                    Items Item = new Items();
                    Item.name = comboBox_name.Text;
                    Item.formula = textBox_formula.Text;
                    Item.s_name = textBox_shortname.Text;
                    Item.concentration = Convertor(textBox_concentration.Text);
                    Item.mobility = Convertor(textBox_mobility.Text);
                    Item.mass = Convertor(textBox_mass.Text);
                    Item.diffusion = Convertor(textBox_difusion.Text);
                    if (radioButton_cation.Checked == true)
                    { Item.cation = true; }
                    else { Item.cation = false; }
                    ItemColection.Add(Item);
                    comboBox_name.Items.Add(Item.name);
                }
                try
                {
                    foreach (Item_box IB in ListOfItemBoxes)
                    {
                        if (IB.Number == selected_nmb)
                        {
                            // vytvor label
                            int limit = sirka_bunky - sirka_bunky / 4;
                            new_label = new System.Windows.Forms.Label();
                            new_label.AutoSize = true;
                            new_label.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
                            new_label.Location = new System.Drawing.Point(IB.Center_x, IB.Center_y);
                            new_label.Name = "Name" + selected_nmb.ToString();
                            new_label.Size = new System.Drawing.Size(20, 30);
                            new_label.TabIndex = 7;
                            new_label.Text = "";
                            this.new_label.MouseClick += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseClick);
                            this.new_label.MouseDown += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseDown);
                            this.new_label.MouseUp += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseUp);
                            this.new_label.MouseMove += new System.Windows.Forms.MouseEventHandler(this.panel1_MouseMove);

                            Point point = new Point();
                            panel1.Controls.Add(new_label);
                            new_label.Text = "[" + textBox_shortname.Text + "]";
                            point.X = IB.Center_x - (new_label.Size.Width / 2);
                            point.Y = IB.Center_y - (new_label.Size.Height / 2);
                            new_label.Location = point;
                            if (new_label.Size.Width > limit)
                            {
                                float old = new_label.Font.Size;
                                while (new_label.Size.Width > limit)
                                {
                                    new_label.Font = new System.Drawing.Font("Microsoft Sans Serif", old, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(238)));
                                    old--;
                                }
                                point = new Point();
                                panel1.Controls.Add(new_label);
                                new_label.Text = "[" + textBox_shortname.Text + "]";
                                point.X = IB.Center_x - (new_label.Size.Width / 2);
                                point.Y = IB.Center_y - (new_label.Size.Height / 2);
                                new_label.Location = point;
                            }
                        }
                    }
                }
                catch { }
                Save_items();
            }
        }

        #region Privatne metody

        private void existing_item(int Name)
        {
            conection_posibility = true;
            comboBox_name.Text = "";
            textBox_formula.Text = "";
            textBox_shortname.Text = "";
            textBox_concentration.Text = "";
            textBox_mobility.Text = "";
            textBox_mass.Text = "";
            textBox_difusion.Text = "";
            foreach (Items_used I in ItemColection_used)
            {
                if (I.box_number == Name)
                {
                    Fill_Element_Boxes(I);
                    if (constanta_live)
                    {
                        textBox_Product.Text = I.s_name;
                    }
                }
            }
            foreach (Item_box IB in ListOfItemBoxes)
            {
                if(Name == IB.Number)
                {
                    selected_coor = new Point();
                    selected_coor.Y = IB.Center_y;
                    selected_coor.X = IB.Center_x;
                    using (Graphics g = Graphics.FromImage(buffer))
                    {
                        int point_x, point_y, delta_x, delta_y;
                        point_x = 2 + IB.Position_x + IB.Dim_x / 10;
                        point_y = 2 + IB.Position_y + IB.Dim_y / 10;
                        delta_x = IB.Dim_x - (IB.Dim_x / 5) - 4;
                        delta_y = IB.Dim_y - (IB.Dim_y / 5) - 4;
                        Pen pen = new Pen(Color.Red, 1);
                        g.DrawRectangle(pen, point_x, point_y, delta_x, delta_y);
                        g.Dispose();
                        System.Drawing.Graphics graphics = this.panel1.CreateGraphics();
                        graphics.DrawImage(buffer, 0, 0, buffer.Width, buffer.Height);
                        point_x = IB.Position_x + IB.Dim_x / 10;
                        point_y = IB.Position_y + IB.Dim_y / 10;
                        delta_x = IB.Dim_x - (IB.Dim_x / 5);
                        delta_y = IB.Dim_y - (IB.Dim_y / 5);
                        Pen pen1 = new Pen(Color.Blue, 1);
                        graphics.DrawRectangle(pen1, point_x, point_y, delta_x, delta_y);
                        Pen pen2 = new Pen(Color.WhiteSmoke, 1);
                        Pen pen3 = new Pen(Color.SkyBlue);

                        graphics.DrawLine(pen2, point_x + delta_x / 3, point_y, point_x + delta_x - delta_x / 3, point_y);
                        graphics.DrawLine(pen2, point_x + delta_x / 3, point_y + delta_y, point_x + delta_x - delta_x / 3, point_y + delta_y);
                        graphics.DrawLine(pen2, point_x, point_y + delta_y / 3, point_x, point_y + delta_y - delta_y / 3);
                        graphics.DrawLine(pen2, point_x + delta_x, point_y + delta_y / 3, point_x + delta_x, point_y + delta_y - delta_y / 3);
                        if (create_reaction)
                        {   //draw line
                            graphics.DrawLine(pen3, selected_coor_old, selected_coor);
                        }
                        using (Graphics b = Graphics.FromImage(buffer))
                        {
                            b.DrawLine(pen3, selected_coor_old, selected_coor);
                            b.Dispose();
                        }
                        graphics.Dispose();
                    }
                }
            }
        }

        private void Fill_Element_Boxes(Items_used Item)
        {
            comboBox_name.Text = Item.name;
            textBox_formula.Text = Item.formula;
            textBox_shortname.Text = Item.s_name;
            textBox_concentration.Text = Item.concentration.ToString();
            textBox_mobility.Text = Item.mobility.ToString();
            textBox_mass.Text = Item.mass.ToString();
            textBox_difusion.Text = Item.diffusion.ToString();
            if (Item.cation)
            {
                radioButton_cation.Checked = true;
            }
            else
            {
                radioButton_neutral.Checked = true;
            }
        }

        private void Fill_Reaction_Boxes(Reactions_used reaction)
        {
            comboBox_reaction.Text = reaction.name;
            textBox1.Text = reaction.Item_name_A;
            textBox_Product.Text = reaction.Item_name_B;
            comboBox_Reactant.SelectedText = reaction.neutral_A;
            comboBox_Product.SelectedText = reaction.neutral_B;
            listBox_Direction.SelectedIndex = reaction.reaction_type;
            textBox_rate.Text = reaction.rate_konstant.ToString();
            textBox_rate_.Text = reaction.rate_konstant_.ToString();
        }

        private void new_item(int Name)
        {
            conection_posibility = false;
            formula_enable(true);
            foreach (Item_box IB in ListOfItemBoxes)
            {
                if (IB.Number == Name) // podl mena najdem box
                {
                    selected_coor = new Point();
                    selected_coor.Y = IB.Center_y;
                    selected_coor.X = IB.Center_x;
                    comboBox_name.Text = "";
                    textBox_formula.Text = "";
                    textBox_shortname.Text = "";
                    textBox_concentration.Text = "";
                    textBox_mobility.Text = "";
                    textBox_mass.Text = "";
                    textBox_difusion.Text = "";
                     int point_x, point_y, delta_x, delta_y;
                     using (Graphics g = Graphics.FromImage(buffer))
                     {
                         point_x = 2 + IB.Position_x + IB.Dim_x / 10;
                         point_y = 2 + IB.Position_y + IB.Dim_y / 10;
                         delta_x = IB.Dim_x - (IB.Dim_x / 5) - 4;
                         delta_y = IB.Dim_y - (IB.Dim_y / 5) - 4;
                         Pen pen = new Pen(Color.Red, 1);
                         g.DrawRectangle(pen, point_x, point_y, delta_x, delta_y);
                         g.Dispose();
                     }
                     System.Drawing.Graphics graphics = this.panel1.CreateGraphics();
                     graphics.DrawImage(buffer, 0, 0, buffer.Width, buffer.Height);
                     point_x = IB.Position_x + IB.Dim_x / 10;
                     point_y = IB.Position_y + IB.Dim_y / 10;
                     delta_x = IB.Dim_x - (IB.Dim_x / 5);
                     delta_y = IB.Dim_y - (IB.Dim_y / 5);
                     Pen pen1 = new Pen(Color.Blue, 1);
                     graphics.DrawRectangle(pen1, point_x, point_y, delta_x, delta_y);
                     Pen pen2 = new Pen(Color.WhiteSmoke, 1);
                     Pen pen3 = new Pen(Color.SkyBlue);
                     graphics.DrawLine(pen2, point_x + delta_x / 3, point_y, point_x + delta_x - delta_x / 3, point_y);
                     graphics.DrawLine(pen2, point_x + delta_x / 3, point_y + delta_y, point_x + delta_x - delta_x / 3, point_y + delta_y);
                     graphics.DrawLine(pen2, point_x, point_y + delta_y / 3, point_x, point_y + delta_y - delta_y / 3);
                     graphics.DrawLine(pen2, point_x + delta_x, point_y + delta_y / 3, point_x + delta_x, point_y + delta_y - delta_y / 3);
                     if (create_reaction)
                     {   //draw line
                         graphics.DrawLine(pen3, selected_coor_old, selected_coor);
                     }
                     using (Graphics g = Graphics.FromImage(buffer))
                     {
                         g.DrawLine(pen3, selected_coor_old, selected_coor);
                         g.Dispose();
                     }
                     graphics.Dispose();
                     //panel1.Invalidate();

                }
            }
        }

        private void new_reaction(int Name)
        {

        }

        private void existing_reaction(int Name)
        {

        }

        private void formula_enable(bool Enable)
        {
            groupBox1.Enabled = Enable;
            try_enable_formula_add();
        }

        private void try_enable_formula_add()
        {
            if( comboBox_name.Text != "" &&
                textBox_formula.Text != "" &&
                textBox_shortname.Text != "" &&
                textBox_concentration.Text != "" &&
                textBox_mobility.Text != "" &&
                textBox_mass.Text != "" &&
                textBox_difusion.Text != "")
            {
                button_ApplyElement.Enabled = true;
            }
            else
            {
                button_ApplyElement.Enabled = false;
            }
        }

        private void konstanta_enable(bool Enable)
        {
            groupBox2.Enabled = Enable;
            try_enable_konstanta_add();
        }

        private void try_enable_konstanta_add()
        {
            if (comboBox_reaction.Text != "" &&
                textBox1.Text != "" &&
                textBox_Product.Text != "" &&
                comboBox_Reactant.Text != "" &&
                comboBox_Product.Text != "" &&
                listBox_Direction.Text != "" &&
                textBox_rate.Text != ""
                )
            {
                button_ApplyReaction.Enabled = true;
            }
            else
            {
                button_ApplyReaction.Enabled = false;
            }
        }

        private void button_ClearElement_Click(object sender, EventArgs e)
        {

        comboBox_name.Text = "";
        textBox_formula.Text = "";
        textBox_shortname.Text = "";
        textBox_concentration.Text = "";
        textBox_mobility.Text = "";
        textBox_mass.Text = "";
        textBox_difusion.Text = "";
        }

        private void radioButton_cation_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton_cation.Checked)
            {
                radioButton_neutral.Checked = false;
            }
            else
            {
                radioButton_neutral.Checked = true;
            }
        }

        private void radioButton_neutral_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton_neutral.Checked)
            {
                radioButton_cation.Checked = false;
            }
            else
            {
                radioButton_cation.Checked = true;
            }
        }

        private void button_ClearReaction_Click(object sender, EventArgs e)
        {
            comboBox_reaction.Text = "";
            textBox1.Text = "";
            textBox_Product.Text = "";
            comboBox_Reactant.SelectedText = "";
            comboBox_Product.SelectedText = "";
            listBox_Direction.Text = "";
            textBox_rate.Text = "";
            textBox_rate_.Text = "";
        }

        #endregion

        private void button_ApplyReaction_Click(object sender, EventArgs e)
        {
            bool pokracuj = true;
            bool zmaz_povodne = false;
            foreach (Reactions_used R in ReactionColection_used)
            {
                if (comboBox_name.Text == R.name) // ak je uz pouzity, ci to myslim vazne
                {
                    if (MessageBox.Show("Do you want to continue?", "Name already exist.",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                        == DialogResult.No)
                    {
                        pokracuj = false;
                    }
                }
                if (selected_nmb_old == R.Item_number_A && R.Item_number_B == selected_nmb)
                {
                    zmaz_povodne = true;
                }
            }
            ///
            if (pokracuj == true)
            {
                if (zmaz_povodne)
                {
                    // zmaz prvky predchadzajucej reakcie z panel1
                }
                Reactions_used new_reaction = new Reactions_used();
                new_reaction.name = comboBox_reaction.Text;
                new_reaction.pointA = selected_coor_old;
                new_reaction.Item_name_A = textBox1.Text;
                new_reaction.Item_number_A = selected_nmb_old;
                new_reaction.pointB = selected_coor_new;
                new_reaction.Item_name_B = textBox_Product.Text;
                new_reaction.Item_number_B = selected_nmb;
                new_reaction.neutral_A = comboBox_Reactant.Text;
                new_reaction.neutral_B = comboBox_Product.Text;
                new_reaction.rate_konstant = Convert.ToDouble(textBox_rate.Text);
                if (textBox_rate_.Text != "")
                {
                    new_reaction.rate_konstant_ = Convert.ToDouble(textBox_rate_.Text);
                }
                new_reaction.reaction_type = listBox_Direction.SelectedIndex;
                ReactionColection_used.Add(new_reaction);
                bool jetu = false;
                foreach (Reactions R in RactionColection)
                {
                    if (R.name == new_reaction.name)
                    {
                        jetu = true;
                    }
                }
                if (!jetu)
                {
                    Reactions Reaction = new Reactions();
                    Reaction.name = comboBox_reaction.Text;
                    Reaction.Item_name_A = textBox1.Text;
                    Reaction.Item_name_B = textBox_Product.Text;
                    Reaction.neutral_A = comboBox_Reactant.Text;
                    Reaction.neutral_B = comboBox_Product.Text;
                    Reaction.rate_konstant = Convert.ToDouble(textBox_rate.Text);
                    if (textBox_rate_.Text != "")
                    {
                        new_reaction.rate_konstant_ = Convert.ToDouble(textBox_rate_.Text);
                    }
                    Reaction.reaction_type = listBox_Direction.SelectedIndex;

                    RactionColection.Add(Reaction);
                    comboBox_reaction.Items.Add(Reaction.name);
                }
                try
                {
                    //kresli reakcnu plochu
                    draw_reactions();
                }
                catch { }
                Save_items();
            }
        }

        private void comboBox_name_SelectedIndexChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();
            foreach (Items Item in ItemColection)
            {
                if (comboBox_name.Text == Item.name)
                {
                    textBox_formula.Text = Item.formula;
                    textBox_shortname.Text = Item.s_name;
                    textBox_concentration.Text = Item.concentration.ToString();
                    textBox_mobility.Text = Item.mobility.ToString();
                    textBox_mass.Text = Item.mass.ToString();
                    textBox_difusion.Text = Item.diffusion.ToString();
                    if (Item.cation)
                    {
                        radioButton_cation.Checked = true;
                    }
                    else
                    {
                        radioButton_cation.Checked = false;
                    }
                }
            }
        }

        private void draw_reactions()
        {        
            foreach (Reactions_used Reaction in ReactionColection_used)
            {
                try
                {
                //kresli reakcnu plochu
                int posun = 0;
                foreach (Label lab in panel1.Controls.OfType<Label>())
                {
                    if ((lab.Name == "Name" + Reaction.Item_number_A.ToString()) || (lab.Name == "Name" + Reaction.Item_number_B.ToString()))
                    {
                        posun += lab.Size.Width/2;
                    }
                }
                int delta = Convert.ToInt32(Math.Sqrt( Math.Pow(Math.Abs(Reaction.pointA.X - Reaction.pointB.X),2) + Math.Pow(Math.Abs(Reaction.pointA.Y - Reaction.pointB.Y),2))) ;
                int sirka = delta - posun - 4;
                int vyska = (sirka_bunky) / 9;
                double uhol = Math.Atan(Convert.ToDouble(Reaction.pointA.Y - Reaction.pointB.Y) / Convert.ToDouble(Reaction.pointA.X - Reaction.pointB.X));
                uhol = 180 * uhol / Math.PI;
                Matrix matrix = new Matrix();
                PointF fix = new PointF((float)(Reaction.pointA.X + (Reaction.pointB.X - Reaction.pointA.X) / 2), (float)(Reaction.pointA.Y + (Reaction.pointB.Y - Reaction.pointA.Y) / 2));
                matrix.RotateAt((float)uhol, fix);
                using (Graphics b = Graphics.FromImage(backround))
                {
                    b.Transform = matrix;
                    SolidBrush bursh = new SolidBrush(Color.Black);
                    Rectangle rec = new Rectangle();
                    FillMode newFillMode = FillMode.Winding;
                    PointF point1 = new PointF();
                    PointF point2 = new PointF();
                    PointF point3 = new PointF();
                    if (Reaction.reaction_type == 0 || Reaction.reaction_type == 2)
                    {   // podmienka smeru 1
                        point1 = new PointF(fix.X + (sirka / 2), fix.Y);
                        point2 = new PointF(fix.X + (sirka / 2) - 3 * vyska / 2, fix.Y - vyska / 2);
                        point3 = new PointF(fix.X + (sirka / 2) - 3 * vyska / 2, fix.Y + vyska / 2);
                        PointF[] curvePoints = { point1, point2, point3 };
                        b.FillPolygon(bursh, curvePoints, newFillMode);
                    }
                    else
                    {
                        b.FillRectangle(bursh, fix.X + (sirka / 2) - 3 * vyska / 2, (fix.Y - vyska / 2) + vyska / 3, 3 * vyska / 2, vyska / 3);
                    }
                    if (Reaction.reaction_type == 1 || Reaction.reaction_type == 2)
                    {   // podmienka smeru 1
                        point1 = new PointF(fix.X - (sirka / 2), fix.Y);
                        point2 = new PointF(fix.X - (sirka / 2) + 3 * vyska / 2, fix.Y - vyska / 2);
                        point3 = new PointF(fix.X - (sirka / 2) + 3 * vyska / 2, fix.Y + vyska / 2);
                        PointF[] curvePoints = { point1, point2, point3 };
                        b.FillPolygon(bursh, curvePoints, newFillMode);
                    }
                    else
                    {
                        b.FillRectangle(bursh, fix.X - (sirka / 2), (fix.Y - vyska / 2) + vyska / 3, 3 * vyska / 2, vyska / 3);
                    }
                    // centralne telo
                    
                    
                    rec.X = Convert.ToInt32(fix.X - (sirka / 2) + 3 * vyska / 2);
                    rec.Y = Convert.ToInt32((fix.Y - vyska / 2) + vyska/3);
                    rec.Width = sirka - 3 * vyska;
                    rec.Height = vyska/3;                
                    b.FillRectangle(bursh, rec);
                    b.ResetTransform();
                    b.Dispose();
                }
                buffer = (Bitmap)backround.Clone();
                System.Drawing.Graphics graphics = this.panel1.CreateGraphics();
                graphics.DrawImage(buffer, 0, 0, buffer.Width, buffer.Height);
                graphics.Dispose();
                }
                catch
                {}
            }        
        }           

        private void textBox_formula_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();

        }

        private void textBox_shortname_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();

        }

        private void textBox_concentration_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();

        }

        private void textBox_mobility_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();

        }

        private void textBox_mass_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();

        }

        private void Load_items()
        {
            string[] str = System.IO.File.ReadAllLines("Items.txt");
            foreach (string st in str)
            {
                string data = "";
                int i = 0;
                Items Item = new Items();
                foreach (char ch in st)
                {
                    if (ch == '\t')
                    {
                        if (i == 0) { Item.name = data; data = ""; }
                        if (i == 1) { Item.formula = data; data = ""; }
                        if (i == 2) { Item.s_name = data; data = ""; }
                        if (i == 3) { Item.concentration = Convertor(data); data = ""; }
                        if (i == 4) { Item.mobility = Convertor(data); data = ""; }
                        if (i == 5) { Item.mass = Convertor(data); data = ""; }
                        if (i == 6) { Item.cation = Convert.ToBoolean(data); }
                        i++;
                    }
                    else
                    {
                        data += ch.ToString();
                    }
                }
                ItemColection.Add(Item);
                comboBox_name.Items.Add(Item.name);
            }
            str = System.IO.File.ReadAllLines("Reactions.txt");
            foreach (string st in str)
            {
                string data = "";
                int i = 0;
                Reactions reaction = new Reactions();
                foreach (char ch in st)
                {
                    if (ch == '\t')
                    {
                        if (i == 0) { reaction.name = data; data = ""; }
                        if (i == 1) { reaction.Item_name_A = data; data = ""; }
                        if (i == 2) { reaction.Item_name_B = data; data = ""; }
                        if (i == 3) { reaction.neutral_A = data; data = ""; }
                        if (i == 4) { reaction.neutral_B = data; data = ""; }
                        if (i == 5) { reaction.rate_konstant = Convertor(data); data = ""; }
                        if (i == 6) { reaction.rate_konstant_ = Convertor(data); data = ""; }
                        if (i == 7) { reaction.reaction_type = Convert.ToInt16(data); data = ""; }
                        i++;
                    }
                    else
                    {
                        data += ch.ToString();
                    }
                }
                RactionColection.Add(reaction);
                comboBox_reaction.Items.Add(reaction.name);
            }
        }

        private void Save_items()
        {
            string str = "";
            foreach (Items Item in ItemColection)
            {
                str += Item.name + "\t";
                str += Item.formula + "\t";
                str += Item.s_name + "\t";
                str += Item.concentration + "\t";
                str += Item.mobility + "\t";
                str += Item.mass + "\t";
                str += Item.cation.ToString() + "\t" + "\r\n";
            }
            System.IO.File.WriteAllText("Items.txt", str);
            str = "";
            foreach (Reactions reaction in RactionColection)
            {
                str += reaction.name + "\t";
                str += reaction.Item_name_A + "\t";
                str += reaction.Item_name_B + "\t";
                str += reaction.neutral_A + "\t";
                str += reaction.neutral_B + "\t";
                str += reaction.rate_konstant + "\t";
                str += reaction.rate_konstant_ + "\t";
                str += reaction.reaction_type + "\t" + "\r\n";
            }
            System.IO.File.WriteAllText("Reactions.txt", str);
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBox about = new AboutBox();
            about.Show();
        }

        private void button_Proceed_Click(object sender, EventArgs e)
        {

        }

        private void textBox_difusion_TextChanged(object sender, EventArgs e)
        {
            try_enable_formula_add();
        }

        private void comboBox_reaction_SelectedIndexChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
        }

        private void textBox_Reactant_TextChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
            create_reaction_name();
        }

        private void comboBox_Reactant_SelectedIndexChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
            create_reaction_name();
        }

        private void textBox_Product_TextChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
            create_reaction_name();
        }

        private void comboBox_Product_SelectedIndexChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
            create_reaction_name();
        }

        private void listBox_Direction_SelectedIndexChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
            create_reaction_name();
        }

        private void textBox_rate_TextChanged(object sender, EventArgs e)
        {
            try_enable_konstanta_add();
        }

        private void create_reaction_name()
        {
            if (constanta_live)
            {
                string str = textBox1.Text + " + " + comboBox_Reactant.Text + " " + listBox_Direction.GetItemText(listBox_Direction.SelectedItem) + " " + textBox_Product.Text + " + " + comboBox_Product.Text;
                comboBox_reaction.Text = str;
            }
        }

        private double Convertor(string Str)
        {
            double dou = 0;
            string d = "";
            try
            {
                dou = Convert.ToDouble(Str);
            }
            catch
            {
                d = "";
                foreach (char ch in s)
                {
                    if (ch == ',')
                    {
                        d += ".";
                    }
                    else
                    {
                        d += ch.ToString();
                    }
                }
                try
                {
                    dou = Convert.ToDouble(d);
                }
                catch
                {
                    d = "";
                    foreach (char ch in s)
                    {
                        if (ch == '.')
                        {
                            d += ",";
                        }
                        else
                        {
                            d += ch.ToString();
                        }
                    }
                    try
                    {
                        dou = Convert.ToDouble(d);
                    }
                    catch
                    {
                        MessageBox.Show("Unable to convert string to double !");
                    }
                }
            }
            return dou;
        }

        private void button_DeleteElement_Click(object sender, EventArgs e)
        {
            Items_used to_remove = new Items_used();
            foreach (Items_used Item in ItemColection_used)
            {
                if (Item.box_number == selected_nmb)
                {
                    to_remove = Item;
                }
            }
            ItemColection_used.Remove(to_remove);
            comboBox_name.Text = "";
            textBox_formula.Text = "";
            textBox_shortname.Text = "";
            textBox_concentration.Text = "";
            textBox_mobility.Text = "";
            textBox_mass.Text = "";
            textBox_difusion.Text = "";
            foreach (Label lab in panel1.Controls.OfType<Label>())
            {
                if (lab.Name == "Name" + selected_nmb.ToString())
                {
                    lab.Dispose();
                }
            }
            // zmaz vsetky reakcie spojene s tymto itemom




            //--
        }

    }
}
